# -*- coding: utf-8 -*-
"""Abdulaziz-Alamri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JV5hvyMClFphfNuNwYKFIGTEqExO7_og

# Project: Investigate a Dataset (No Show Appointments)

## Table of Contents
<ul>
<li><a href="#intro">Introduction</a></li>
<li><a href="#wrangling">Data Wrangling</a></li>
<li><a href="#eda">Exploratory Data Analysis</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>

<a id='intro'></a>
## Introduction


Introductions :

Questions we are trying to answer :

1 - What is the rating for No-Show gender patients?

2 - What is age rating of Alcoholism for the patient they show?
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# %matplotlib inline

"""<a id='wrangling'></a>
## Data Wrangling

### General Properties
"""

# Load the data. 
df = pd.read_csv('noshowappointments.csv')

df.head()

# there is no null values
df.info()

"""> 
### Data Cleaning (Show the data)
"""

#deal with names
df.rename(columns = {'patient_id':'IDpatient','appointment_day': 'Idappointment', 'gender': 'Gender','scheduled_day': 'Scheduled_Day','appointment_day': 'Appointment_Day','age': 'Age','neighbourhood': 'Neighbourhood','scholarship': 'Scholarship','No-show': 'no_show'}
          , inplace = True)

#size of the dataset
df.shape

"""110527 records and 14 columns in the dataset."""

#To make data clear and easy to use
df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])
df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])
df['PatientId'] = df['PatientId'].astype('int64')
df['make_show_easy'] = np.where(df['no_show']=='Yes', 1, 0)

# Create awaiting_time_days column
df['awaiting_time_days'] = (df.AppointmentDay - df.ScheduledDay).dt.days

df.describe()

df['Age'].mean()

# to make sure all patient in real age
df = df[(df.Age >= 0) & (df.Age <= 115)]

df.hist(figsize=(10,14));

"""Histogram observations
- Age: There are many very young people in the dataset but in general the patients age is distributed evenly and the number of patients goes drastricly down for patients older than 60 years.

- Alcoholism: Most of the patients are not alcoholics.

- Diabetes: Most of the patients are not diabetes but more than alcoholics.

- Handicap: There are for handicap categories with most of the people not being handicapted.

- Hypertension: Most patients do not have hypertension diagnosed.
"""

# Print Unique Values
print("Unique Values in `scholarship` => {}".format(df.Scholarship.unique()))

# Print Unique Values
print("Unique Values in `hypertension` => {}".format(df.Hipertension.unique()))

# Print Unique Values
print("Unique Values in `diabetes` => {}".format(df.Diabetes.unique()))

# Print Unique Values
print("Unique Values in `alcoholism` => {}".format(df.Alcoholism.unique()))

df.Handcap.value_counts()

print("Unique Values in `awaiting_time_days` => {}".format(df.awaiting_time_days.unique()))

"""<a id='eda'></a>
## Exploratory Data Analysis


### Research Question 1 (What is the rating for No-Show gender patients?)
"""

df.head()

df.info()

ax = sns.countplot(x=df.Gender, hue=df.no_show, data=df)
ax.set_title("No-Show gender")
x_ticks_labels=['Female', 'Male']
plt.show();

print('females appointments {} , missed {} with the ratio {}%'.format(len(df.loc[df['Gender'] == "F"]), len(df.query('no_show == "Yes" and Gender == "F"')), int(round(len(df.query('no_show == "Yes" and Gender == "F"'))/len(df.loc[df['Gender'] == "F"])*100))))
print('Male appointments {} , missed {} with the ratio {}%'.format(len(df.loc[df['Gender'] == "M"]), len(df.loc[(df['Gender'] == "M") & (df['no_show'] == "Yes")]), int(round(len(df.loc[(df['Gender'] == "M") & (df['no_show'] == "Yes")])/len(df.loc[df['Gender'] == "M"])*100))))

"""### Research Question 2  (What is age rating of Alcoholism for the patient they show?)"""

df[['Alcoholism', 'make_show_easy']].groupby(['Alcoholism'], as_index=False).mean().sort_values(by='make_show_easy', ascending=False)

grid = sns.FacetGrid(df, col='no_show', row='Alcoholism', height=2, aspect=2)
grid.map(plt.hist, 'Age', alpha=.4, bins=15)
grid.add_legend();

"""We can see the most age is 60 they deal with alcohol show

<a id='conclusions'></a>
## Conclusions

Conclusions
Conclusions I have looked into the dataset and managed a few problems like unifying names, removing wrong data. 


- There are many very young people in the dataset (most of them of age 0) but in general the patients age is distributed evenly and the number of patients goes drastricly down for patients older than 60 years.

- The patients are 37 years on average.

- Most of the patients are not alcoholics.

- On average, 20% of appointments were missed.

- Out of 71831 appointments made by females, 14588 were missed with the ratio of 20%.
- Out of 38685 appointments made by males, 7723 were missed with the ratio of 20%.
- The charts confirm about 20% no-show rate for most categories.
-the gender or alcoholic is not a factor to decide if the person would come to his appointment
"""